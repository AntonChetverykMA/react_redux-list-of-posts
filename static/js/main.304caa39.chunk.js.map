{"version":3,"sources":["helpers/api.js","store/posts.ts","store/post.ts","store/index.ts","components/PostListItem/PostListItem.tsx","components/PostsList/PostsList.tsx","helpers/options.ts","components/NewCommentForm/NewCommentForm.tsx","components/Loader/Loader.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","request","url","options","fetch","then","res","ok","Error","status","json","updatePostId","id","type","initialState","posts","postId","userId","reducer","state","action","removeComment","Promise","resolve","method","headers","setTimeout","addComment","data","body","JSON","stringify","fetchPostInfo","setIsLoading","dispatch","all","post","comments","getPost","getComments","rootReducer","combineReducers","postsReducer","postReducer","getPostsSelector","getActivePostId","getActiveUserId","store","createStore","composeWithDevTools","applyMiddleware","thunk","PostsListItem","activePostId","useSelector","useDispatch","title","className","cn","active","onClick","PostsList","activeUserId","useEffect","filtredPost","useMemo","postsCopy","length","filter","map","key","value","name","NewCommentForm","useState","userName","setUserName","email","setEmail","setBody","onSubmit","e","a","preventDefault","comment","placeholder","onChange","target","Loader","PostDetails","isShownComments","setIsShownComments","isLoading","commentId","current","item","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.304caa39.chunk.js","sourcesContent":["export const BASE_URL = \"https://mate-api.herokuapp.com/\";\n\nexport const request = (url = \"\", options) => {\n  return fetch(`${BASE_URL}${url}`, options).then((res) => {\n    if (!res.ok) {\n      throw new Error(`${res.status}`);\n    }\n\n    return res.json();\n  });\n};\n\nexport const post = (url, data) => {\n  return request(url, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json; charset=utf-8\" },\n    body: JSON.stringify(data),\n  });\n};\n\nexport const patch = (url, data) => {\n  return request(url, {\n    method: \"PATCH\",\n    headers: { \"Content-Type\": \"application/json; charset=utf-8\" },\n    body: JSON.stringify(data),\n  });\n};\n\nexport const remove = (url) => {\n  return request(url, {\n    method: \"DELETE\",\n    headers: { \"Content-Type\": \"application/json; charset=utf-8\" },\n  });\n};\n","import { Dispatch, AnyAction } from \"redux\";\nimport { request } from \"../helpers/api\";\n\n// Action types\nconst GET_TODOS = \"GET_TODOS\";\nconst UPDATE_ACTIVE_POST_ID = \"UPDATE_ACTIVE_POST_ID\";\nconst UPDATE_ACTIVE_USER_ID = \"UPDATE_ACTIVE_USER_ID\";\n\n// Action creators\nexport const getPosts = (posts: any[]) => ({ type: GET_TODOS, posts });\n\nexport const fetchPosts = () => (dispatch: Dispatch) => {\n  request(\"posts\").then((res) => dispatch(getPosts(res.data)));\n};\n\nexport const updatePostId = (id: number) => ({\n  type: UPDATE_ACTIVE_POST_ID,\n  id,\n});\n\nexport const updateUsertId = (id: number) => ({\n  type: UPDATE_ACTIVE_USER_ID,\n  id,\n});\n\nexport type RootState = {\n  posts: any[];\n  postId: number;\n  userId: number;\n};\n\nconst initialState: RootState = {\n  posts: [],\n  postId: 0,\n  userId: 0,\n};\n\nconst reducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case GET_TODOS:\n      return { ...state, posts: action.posts };\n\n    case UPDATE_ACTIVE_POST_ID:\n      return { ...state, postId: action.id };\n\n    case UPDATE_ACTIVE_USER_ID:\n      return { ...state, userId: action.id };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { Dispatch, AnyAction } from \"redux\";\nimport { request, remove, post } from \"../helpers/api\";\nimport { IPost, IComment } from \"../Interfaces\";\n\n// Action types\nconst SET_POST = \"SET_POST\";\nconst SET_COMMENTS = \"SET_COMMENTS\";\n\n// Action creators\nexport const getPost = (post: IPost) => ({ type: SET_POST, post });\n\nexport const getComments = (comments: IComment[]) => ({\n  type: SET_COMMENTS,\n  comments,\n});\n\nexport const removeComment = (id: number) => {\n  return new Promise((resolve) => {\n    remove(`comments/${id}`);\n    setTimeout(() => resolve(), 1000);\n  });\n};\n\nexport const addComment = (\n  options: IComment & { name: string; email: string }\n) => post(\"comments\", options);\n\nexport const fetchPostInfo = (\n  id: number,\n  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>\n) => (dispatch: Dispatch) => {\n  setIsLoading(true);\n\n  Promise.all([request(`posts/${id}`), request(`comments/?postId=${id}`)]).then(\n    ([post, comments]) => {\n      dispatch(getPost(post.data));\n      dispatch(getComments(comments.data));\n      setIsLoading(false);\n    }\n  );\n};\n\nexport type RootState = {\n  post: IPost | null;\n  comments: IComment[];\n};\n\nconst initialState: RootState = {\n  post: null,\n  comments: [],\n};\n\nconst reducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_POST:\n      return { ...state, post: action.post };\n\n    case SET_COMMENTS:\n      return { ...state, comments: action.comments };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\n\nimport postsReducer from \"./posts\";\nimport postReducer from \"./post\";\n\nconst rootReducer = combineReducers({\n  posts: postsReducer,\n  post: postReducer,\n});\n\n// We automatically get types returned by concrete reducers\nexport type RootState = ReturnType<typeof rootReducer>;\n\n// Selectors - a function receiving Redux state and returning some data from it\n\nexport const getPostsSelector = (state: RootState) => state.posts.posts;\nexport const getActivePostId = (state: RootState) => state.posts.postId;\nexport const getActiveUserId = (state: RootState) => state.posts.userId;\nexport const getPost = (state: RootState) => state.post.post;\nexport const getComments = (state: RootState) => state.post.comments;\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default store;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { IPost } from \"../../Interfaces\";\nimport cn from \"classnames\";\nimport { getActivePostId } from \"../../store\";\nimport { updatePostId } from \"../../store/posts\";\n\nexport const PostsListItem: React.FC<{ post: IPost }> = ({ post }) => {\n  const activePostId = useSelector(getActivePostId);\n  const dispatch = useDispatch();\n  const { title, userId, id } = post;\n\n  const onClick = () => {\n    if (activePostId === id) {\n      dispatch(updatePostId(0));\n    } else {\n      dispatch(updatePostId(id));\n    }\n  };\n\n  return (\n    <>\n      <div>\n        <b>{`[User #${userId}]: `}</b>\n        {title}\n      </div>\n\n      <button\n        type=\"button\"\n        className={cn(\"PostsList__button button\", {\n          active: id === activePostId,\n        })}\n        onClick={onClick}\n      >\n        {activePostId === id ? \"Close\" : \"Open\"}\n      </button>\n    </>\n  );\n};\n","import React, { useEffect, useMemo } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport \"./PostsList.scss\";\nimport { getPostsSelector, getActiveUserId } from \"../../store/index\";\nimport { fetchPosts } from \"../../store/posts\";\nimport { IPost } from \"../../Interfaces\";\n\nimport { PostsListItem } from \"../PostListItem/PostListItem\";\n\nexport const PostsList = () => {\n  const posts = useSelector(getPostsSelector);\n  const activeUserId = useSelector(getActiveUserId);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchPosts());\n    // eslint-disable-next-line\n  }, []);\n\n  const filtredPost = useMemo(() => {\n    let postsCopy = [...posts];\n    if (postsCopy.length > 0 && activeUserId) {\n      postsCopy = postsCopy.filter((post) => post.userId === activeUserId);\n    }\n\n    return postsCopy;\n  }, [posts, activeUserId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {filtredPost.length > 0\n          ? filtredPost.map((post: IPost) => (\n              <li className=\"PostsList__item\" key={post.id}>\n                <PostsListItem post={post} />\n              </li>\n            ))\n          : \"no posts\"}\n      </ul>\n    </div>\n  );\n};\n","export const options = [\n  { value: 0, name: \"All users\" },\n  { value: 1, name: \"Leanne Graham\" },\n  { value: 2, name: \"Ervin Howell\" },\n  { value: 3, name: \"Clementine Bauch\" },\n  { value: 4, name: \"Patricia Lebsack\" },\n  { value: 5, name: \"Chelsey Dietrich\" },\n  { value: 6, name: \"Mrs. Dennis Schulist\" },\n  { value: 7, name: \"Kurtis Weissnat\" },\n  { value: 8, name: \"Nicholas Runolfsdottir V\" },\n  { value: 9, name: \"Glenna Reichert\" },\n  { value: 10, name: \"Leanne Graham\" },\n];\n","import React, { useState } from \"react\";\nimport { addComment, fetchPostInfo } from \"../../store/post\";\nimport { getActivePostId } from \"../../store/index\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport \"./NewCommentForm.scss\";\n\nexport const NewCommentForm: React.FC<{\n  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>;\n}> = ({ setIsLoading }) => {\n  const activePostId = useSelector(getActivePostId);\n  const [userName, setUserName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const dispatch = useDispatch();\n\n  const reset = () => {\n    setUserName(\"\");\n    setEmail(\"\");\n    setBody(\"\");\n  };\n\n  const onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (userName && email && body) {\n      const comment = { name: userName, email, body, postId: activePostId };\n      await addComment(comment);\n      dispatch(fetchPostInfo(activePostId, setIsLoading));\n      reset();\n    }\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={onSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          value={userName}\n          className=\"NewCommentForm__input\"\n          onChange={(e) => setUserName(e.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={(e) => setEmail(e.target.value)}\n          value={email}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={(e) => setBody(e.target.value)}\n          value={body}\n        />\n      </div>\n\n      <button type=\"submit\" className=\"NewCommentForm__submit-button button\">\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React from \"react\";\nimport \"./Loader.scss\";\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from \"react\";\n\nimport \"./PostDetails.scss\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { NewCommentForm } from \"../NewCommentForm/NewCommentForm\";\nimport { getPost, getActivePostId, getComments } from \"../../store\";\nimport { fetchPostInfo, removeComment } from \"../../store/post\";\nimport { IComment } from \"../../Interfaces\";\nimport { Loader } from \"../Loader/Loader\";\n\nexport const PostDetails = () => {\n  const post = useSelector(getPost);\n\n  const activePostId = useSelector(getActivePostId);\n  const comments = useSelector(getComments);\n  const dispatch = useDispatch();\n  const [isShownComments, setIsShownComments] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (activePostId) {\n      dispatch(fetchPostInfo(activePostId, setIsLoading));\n    }\n  }, [activePostId, dispatch]);\n\n  const onClick = async (commentId: number, postId: number) => {\n    await removeComment(commentId);\n    dispatch(fetchPostInfo(postId, setIsLoading));\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <>\n          {activePostId && post ? (\n            <>\n              <h2>Post details:</h2>\n\n              <section className=\"PostDetails__post\">\n                <p>{post.title}</p>\n              </section>\n\n              <section className=\"PostDetails__comments\">\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={() => setIsShownComments((current) => !current)}\n                >\n                  {isShownComments ? \"Hide comments\" : \"Show comments\"}\n                </button>\n                {isShownComments && (\n                  <ul className=\"PostDetails__list\">\n                    {comments.length > 0\n                      ? comments.map((item: IComment) => (\n                          <li className=\"PostDetails__list-item\" key={item.id}>\n                            <button\n                              type=\"button\"\n                              className=\"PostDetails__remove-button button\"\n                              onClick={() => onClick(item.id!, activePostId)}\n                            >\n                              X\n                            </button>\n                            <p>{item.body}</p>\n                          </li>\n                        ))\n                      : \"No comments\"}\n                  </ul>\n                )}\n              </section>\n\n              <section>\n                <div className=\"PostDetails__form-wrapper\">\n                  <NewCommentForm setIsLoading={setIsLoading} />\n                </div>\n              </section>\n            </>\n          ) : (\n            <span className=\"select-post\">Select post</span>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { PostsList } from \"./components/PostsList/PostsList\";\nimport { options } from \"./helpers/options\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getActiveUserId } from \"./store\";\nimport { updateUsertId } from \"./store/posts\";\nimport { PostDetails } from \"./components/PostDetails/PostDetails\";\n\nimport \"./App.scss\";\n\nconst App = () => {\n  const activeUserId = useSelector(getActiveUserId);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n          <select\n            className=\"App__user-selector\"\n            value={activeUserId}\n            onChange={(e) => dispatch(updateUsertId(+e.target.value))}\n          >\n            {options.map(({ value, name }) => (\n              <option value={value} key={value}>\n                {name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport store from \"./store\";\n\nconst Root = () => (\n  <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\n"],"sourceRoot":""}